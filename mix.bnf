<block> ::= <optional_statement_list>

<optional_statement_list> ::= ""
                            | <optional_statement_list> <statement>
                            | <optional_statement_list> <export_statement>

; --------------------------------------------------------------------------- ;

<statement> ::= ";"
              | <expression> ";"
              | <identifier_declaration_statement>
              | <assignment_statement>
              | <selection_statement>
              | <iteration_statement>
              | <jump_statement>
              | <import_statement>
              | <compound_statement>
              | <enum_declaration>
              | <struct_definition>

<identifier_declaration_statement> ::= "var" <variable_declaration_list> ";"
                                     | "let" <variable_declaration_list> ";"

<assignment_statement> ::= <variable> "=" <expression> ";"
                         | <variable> "=" <braced_initializer> ";"
                         | <variable> <assignment_operator> <expression> ";"

<variable> ::= <identifier>
             | <postfix_expression> "[" <expression> "]"
             | <postfix_expression> "." <identifier>

<assignment_operator> ::= "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>="

<variable_declaration_list> ::= <variable_declaration>
                              | <variable_declaration_list> "," <variable_declaration>

<initializer_clause> ::= <identifier> "=" <expression>
                       | <identifier> "=" <braced_initializer>

<variable_declaration> ::= <identifier>
                         | <initializer_clause>

<braced_initializer> ::= "{" "}"
                       | "{" <initializer_clause_list> "}"
                       | "{" <initializer_clause_list> "," "}"

<initializer_clause_list> ::= <initializer_clause>
                            | <initializer_clause_list> "," <initializer_clause>

<selection_statement> ::= "if" <expression> <compound_statement>
                        | "if" <expression> <compound_statement> "else" <selection_statement>
                        | "if" <expression> <compound_statement> "else" <compound_statement>

<iteration_statement> ::= "while" <expression> <compound_statement>
                        | "do" <compound_statement> "while" <expression> ";"
                        | "for" <identifier> "in" <expression> <compound_statement>

<compound_statement> ::= "{" <optional_statement_list> "}"

<jump_statement> ::= "continue" ";"
                   | "break" ";"
                   | "return" ";"
                   | "return" <expression> ";"

; --------------------------------------------------------------------------- ;

<export_statement> ::= "export" <identifier_list> ";"

<identifier_list> ::= <identifier>
                    | <identifier_list> "," <identifier>

<import_statement> ::= "import" <import_item_list> ";"
                     | "import" <import_item> "as" <identifier> ";"

<import_item_list> ::= <import_item>
                     | <import_item_list> "," <import_item>

<import_item> ::= <identifier>
                | <nested_import_scope> <identifier>

<nested_import_scope> ::= <identifier> "."
                        | <nested_import_scope> <identifier> "."

; --------------------------------------------------------------------------- ;

<expression> ::= <conditional_expression>

<conditional_expression> ::= <logical_or_expression>
                           | <logical_or_expression> "?" <conditional_expression> ":" <conditional_expression>

<logical_or_expression> ::= <logical_and_expression>
                          | <logical_or_expression> "||" <logical_and_expression>

<logical_and_expression> ::= <inclusive_or_expression>
                           | <logical_and_expression> "&&" <inclusive_or_expression>

<inclusive_or_expression> ::= <exclusive_or_expression>
                            | <inclusive_or_expression> "|" <exclusive_or_expression>

<exclusive_or_expression> ::= <and_expression>
                            | <exclusive_or_expression> "^" <and_expression>

<and_expression> ::= <equality_expression>
                   | <and_expression> "&" <equality_expression>

<equality_expression> ::= <relational_expression>
                        | <equality_expression> <equality_operator> <relational_expression>

<equality_operator> ::= "==" | "!="

<relational_expression> ::= <shift_expression>
                          | <relational_expression> <relational_operator> <shift_expression>

<relational_operator> ::= "<" | ">" | "<=" | ">="

<shift_expression> ::= <additive_expression>
                     | <shift_expression> <shift_operator> <additive_expression>

<shift_operator> ::= "<<" | ">>"

<additive_expression> ::= <multiplicative_expression>
                        | <additive_expression> <additive_operator> <multiplicative_expression>

<additive_operator> ::= "+" | "-"

<multiplicative_expression> ::= <unary_expression>
                              | <multiplicative_expression> <multiplicative_operator> <unary_expression>

<multiplicative_operator> ::= "*" | "/" | "%"

<unary_expression> ::= <postfix_expression>
                     | <constant>
                     | <unary_operator> <unary_expression>

<unary_operator> ::= <arithmetic_unary_operator>
                   | <logical_unary_operator>

<arithmetic_unary_operator> ::= '+' | '-' | '~'

<logical_unary_operator> ::= '!'

<postfix_expression> ::= <variable>
                       | "(" <expression> ")"
                       | <lambda>
                       | <nested_name_specifier> <identifier>
                       | <postfix_expression> "(" <expression_or_braced_initializer_list> ")"
                       | <postfix_expression> "(" ")"

<lambda> ::= <function_declaration> <compound_statement>

<function_declaration> ::= "func" "(" <function_declaration_parameter_list> ")"

<function_declaration_parameter_list> ::= ""
                                        | <identifier_list>

<expression_or_braced_initializer_list> ::= <expression>
                                          | <braced_initializer>
                                          | <expression_or_braced_initializer_list> "," <expression>
                                          | <expression_or_braced_initializer_list> "," <braced_initializer>

<constant> ::= <integer>
             | <floating_point>
             | <literal_string>

; --------------------------------------------------------------------------- ;

<enum_declaration> ::= "enum" "{" <optional_enum_member_list> "}"

<optional_enum_member_list> ::= ""
                              | <enum_member_list>
                              | <enum_member_list> ','

<enum_member_list> ::= <identifier>
                     | <identifier> '=' <integer>
                     | <enum_member_list> "," <identifier>
                     | <enum_member_list> "," <identifier> "=" <integer>

; --------------------------------------------------------------------------- ;

<struct_definition> ::= "struct" <identifier> "{" <optional_struct_member_list> "}"

<optional_struct_member_list> ::= ""
                                | <optional_struct_member_list> <identifier_declaration_statement>

; --------------------------------------------------------------------------- ;

<identifier> ::= <character_of_identifier> <character_or_digit_sequence>

<character_or_digit_sequence> ::= ""
                                | <character_or_digit_sequence> <character_of_identifier>
                                | <character_or_digit_sequence> <digit>

<character_of_identifier> ::= "_"
                            | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
                            | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
                            | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
                            | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

; --------------------------------------------------------------------------- ;

<integer> ::= <digit_sequence>
            | <digit_sequence> <exponent_specifier> <positive_plain_integer>

<positive_plain_integer> ::= <digit_sequence>
                           | "+" <digit_sequence>

<negative_plain_integer> ::= "-" <digit_sequence>

<floating_point> ::= <fractional>
                   | <fractional> <exponent_specifier> <digit_sequence>
                   | <digit_sequence> <exponent_specifier> <negative_plain_integer>

<fractional> ::= <digit_sequence> "." <digit_sequence>

<exponent_specifier> ::= "e" | "E"

<digit_sequence> ::= <digit>
                   | <digit_sequence> <digit>

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

; --------------------------------------------------------------------------- ;

<literal_string> ::= "\"" <non-quote-characters> "\""
